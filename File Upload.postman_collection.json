{
	"info": {
		"_postman_id": "d10585f0-393d-4ffd-9351-5d283acf97a7",
		"name": "File Upload",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24292538"
	},
	"item": [
		{
			"name": "FILE UPLOAD PLEASE DO NOT DELETE",
			"item": [
				{
					"name": "Upload CSV uprate 1 out of 3 records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "1 out of 3.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV uprate 3 out of 3 records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"100.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"200.20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"300.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "3 out of 3.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update int floorPrice  to decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(200)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"    });",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"                            });",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "int to decimal.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update decimal floorPrice to int",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(200)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"    });",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"                            });",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"100.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"200.20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"300.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "decimal into int.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update dy zero floorPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "zero.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update dy zero decimal floorPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let pricingObject = {",
									"    get pricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"console.log('Send Create Publisher Request');",
									"pm.sendRequest(publisherObject.publisherRequest, function(err, publisherResponse) {",
									"",
									"    var jsonData = publisherResponse.json();",
									"    if (err) {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    } else {",
									"        postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"        console.log('Send Create Media Request');",
									"        pm.sendRequest(mediaObject.mediaRequest, function(err, mediaResponse) {",
									"            var mediaJsonData = mediaResponse.json();",
									"            if (err) {",
									"                console.log(err);",
									"                clearTimeout(interval);",
									"            } else {",
									"                postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"",
									"                console.log('Send Create Adspot Request');",
									"                pm.sendRequest(adSpotObject.adspotRequest, function(err, adspotResponse) {",
									"                    var jsonData = adspotResponse.json();",
									"                    if (err) {",
									"                        console.log(err);",
									"                        clearTimeout(interval);",
									"                    } else {",
									"                        postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"                        console.log('Send Create Pricing Request First');",
									"                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"                        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                            var pricingJsonData = pricingResponse.json();",
									"                            if (err) {",
									"                                console.log(err);",
									"                                clearTimeout(interval);",
									"                            } else {",
									"                                postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"                                postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"                                postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"",
									"                                console.log('Send Create Pricing Request Second');",
									"                                postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"                                postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
									"                                pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                    var pricingJsonData = pricingResponse.json();",
									"                                    if (err) {",
									"                                        console.log(err);",
									"                                        clearTimeout(interval);",
									"                                    } else {",
									"                                        postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"",
									"                                        console.log('Send Create Pricing Request Third');",
									"                                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"                                        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"                                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                            var pricingJsonData = pricingResponse.json();",
									"                                            if (err) {",
									"                                                console.log(err);",
									"                                                clearTimeout(interval);",
									"                                            } else {",
									"                                                postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"",
									"                                            }",
									"                                        });",
									"",
									"                                    }",
									"                                });",
									"",
									"                            }",
									"                        });",
									"                    }",
									"                });",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "zero decimal.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice to int",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "zero to int.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice to decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(200)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"    });",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"                            });",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let pricingObject = {",
									"    get pricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"console.log('Send Create Publisher Request');",
									"pm.sendRequest(publisherObject.publisherRequest, function(err, publisherResponse) {",
									"",
									"    var jsonData = publisherResponse.json();",
									"    if (err) {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    } else {",
									"        postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"        console.log('Send Create Media Request');",
									"        pm.sendRequest(mediaObject.mediaRequest, function(err, mediaResponse) {",
									"            var mediaJsonData = mediaResponse.json();",
									"            if (err) {",
									"                console.log(err);",
									"                clearTimeout(interval);",
									"            } else {",
									"                postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"",
									"                console.log('Send Create Adspot Request');",
									"                pm.sendRequest(adSpotObject.adspotRequest, function(err, adspotResponse) {",
									"                    var jsonData = adspotResponse.json();",
									"                    if (err) {",
									"                        console.log(err);",
									"                        clearTimeout(interval);",
									"                    } else {",
									"                        postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"                        console.log('Send Create Pricing Request First');",
									"                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"                        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                            var pricingJsonData = pricingResponse.json();",
									"                            if (err) {",
									"                                console.log(err);",
									"                                clearTimeout(interval);",
									"                            } else {",
									"                                postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"                                postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"                                postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"",
									"                                console.log('Send Create Pricing Request Second');",
									"                                postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"                                postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
									"                                pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                    var pricingJsonData = pricingResponse.json();",
									"                                    if (err) {",
									"                                        console.log(err);",
									"                                        clearTimeout(interval);",
									"                                    } else {",
									"                                        postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"",
									"                                        console.log('Send Create Pricing Request Third');",
									"                                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"                                        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"                                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                            var pricingJsonData = pricingResponse.json();",
									"                                            if (err) {",
									"                                                console.log(err);",
									"                                                clearTimeout(interval);",
									"                                            } else {",
									"                                                postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"",
									"                                            }",
									"                                        });",
									"",
									"                                    }",
									"                                });",
									"",
									"                            }",
									"                        });",
									"                    }",
									"                });",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "zero to int.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice to min decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "to decimal min.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice to max decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"999999.99\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "to decimal max.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by too large decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"          pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '9999999.99': A valid price is between 0.00 and 999,999.99\");",
									"                                    });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by too large decimal.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by too large int",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '99999999.00': A valid price is between 0.00 and 999,999.99\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by too large int.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by negative int",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-999999.00': A valid price is between 0.00 and 999,999.99\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by negative integer.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by negative decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-9999.99': A valid price is between 0.00 and 999,999.99\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by negative decimal.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by negative zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-0.01': A valid price is between 0.00 and 999,999.99\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by negative zero.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by String value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'Number01': not a valid value\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by string value.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update zero floorPrice by Stringified number value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by stringified numeric value.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update  floorPrice by empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"        pm.test(\"verify error message is correct\", () =>{",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
									"        });",
									"",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '': not a valid value\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by emty floor price.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update by empty open-pricing-name value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"        pm.test(\"verify error message is correct\", () =>{",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
									"        });",
									"",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Rule Name '': could not match the open pricing Rule Name to the publisher\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by emty open pricing name.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update  floorPrice by null value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"        pm.test(\"verify error message is correct\", () =>{",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
									"        });",
									"",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'null': not a valid value\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by null floor price.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update  floorPrice when publisher is disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"Publisher is disabled and must be re-enabled to import pricing rules\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": Boolean(`${pm.environment.get(\"import_pub_isEnabled\")}`)",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Update Publisher object",
									"let updatePublisherObject = {",
									"    get publisherRequest() {",
									"        ",
									"        //Update  Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers/\" + `${pm.environment.get(\"import_pub_id\")}`,",
									"            method: 'PUT',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": false",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const disablePublisher = async () => {",
									"    const request = await reqPromise(updatePublisherObject.publisherRequest);",
									"    ",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');   ",
									"        postman.setEnvironmentVariable(\"import_pub_isEnabled\", true );     ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"",
									"        console.log('Send Disable Publisher Request');     ",
									"        await disablePublisher();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by disabled publisher.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update floorPrice of disabled open-pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
									"        });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": false,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"100.10\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"200.20\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"300.30\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "3 out of 3.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update  floorPrice for non existent publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(400)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"                            });",
									"",
									"                            ",
									"",
									"                            pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"Publisher must exist to import pricing rules\");",
									"                                    });",
									"",
									"",
									"    ",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": Boolean(`${pm.environment.get(\"import_pub_isEnabled\")}`)",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Update Publisher object",
									"let updatePublisherObject = {",
									"    get publisherRequest() {",
									"        ",
									"        //Update  Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers/\" + `${pm.environment.get(\"import_pub_id\")}`,",
									"            method: 'PUT',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": false",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let pricingObject = {",
									"    get pricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"console.log('Send Create Publisher Request');",
									"postman.setEnvironmentVariable(\"import_pub_isEnabled\", true );",
									"pm.sendRequest(publisherObject.publisherRequest, function(err, publisherResponse) {",
									"",
									"    var jsonData = publisherResponse.json();",
									"    if (err) {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    } else {",
									"        postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"        console.log('Send Create Media Request');",
									"        pm.sendRequest(mediaObject.mediaRequest, function(err, mediaResponse) {",
									"            var mediaJsonData = mediaResponse.json();",
									"            if (err) {",
									"                console.log(err);",
									"                clearTimeout(interval);",
									"            } else {",
									"                postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"",
									"                console.log('Send Create Adspot Request');",
									"                pm.sendRequest(adSpotObject.adspotRequest, function(err, adspotResponse) {",
									"                    var jsonData = adspotResponse.json();",
									"                    if (err) {",
									"                        console.log(err);",
									"                        clearTimeout(interval);",
									"                    } else {",
									"                        postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"                        console.log('Send Create Pricing Request First');",
									"                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"                        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
									"                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                            var pricingJsonData = pricingResponse.json();",
									"                            if (err) {",
									"                                console.log(err);",
									"                                clearTimeout(interval);",
									"                            } else {",
									"                                postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"                                postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"                                postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"",
									"                                console.log('Send Create Pricing Request Second');",
									"                                postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"                                postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
									"                                pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                    var pricingJsonData = pricingResponse.json();",
									"                                    if (err) {",
									"                                        console.log(err);",
									"                                        clearTimeout(interval);",
									"                                    } else {",
									"                                        postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"",
									"                                        console.log('Send Create Pricing Request Third');",
									"                                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"                                        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
									"                                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                            var pricingJsonData = pricingResponse.json();",
									"                                            if (err) {",
									"                                                console.log(err);",
									"                                                clearTimeout(interval);",
									"                                            } else {",
									"                                                postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"",
									"                                                console.log('Send Disable Publisher Request');",
									"                                                postman.setEnvironmentVariable(\"import_pub_isEnabled\", \"false\" );",
									"                                                pm.sendRequest(updatePublisherObject.publisherRequest, function(err, updatePublisherResponse) {",
									"                                                    ",
									"                                                    if (err) {",
									"                                                        console.log(err);",
									"                                                        ",
									"                                                    } else {",
									"                                                        ",
									"",
									"                                                    }",
									"                                                });",
									"                                            }",
									"                                        });",
									"",
									"                                    }",
									"                                });",
									"",
									"                            }",
									"                        });",
									"                    }",
									"                });",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by disabled publisher.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id=100500&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "100500"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV incorrect floor price header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"    ",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by incorect floorPrice header.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV incorrect quantity of headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is incorrectly formatted\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by incorect quantity of headers.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV incorrect quantity of columns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file does not have the correct number of columns\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by incorect quantity of colunms.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload empty CSV file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is empty\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by empty CSV file.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV file with no data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file contains no data\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by no data.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update by non-csv file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(415);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"The uploaded file is not a CSV file\");",
									"                                    });",
									"",
									"",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "non-csv.shell"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV with empty floorPrice header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(400);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(400)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"                            });",
									"",
									"                            ",
									"",
									"                            pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
									"                                    });",
									"                              ",
									"    ",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by empty floor price header.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV with empty pricing name header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let pricingObject = {",
									"    get pricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"console.log('Send Create Publisher Request');",
									"pm.sendRequest(publisherObject.publisherRequest, function(err, publisherResponse) {",
									"",
									"    var jsonData = publisherResponse.json();",
									"    if (err) {",
									"        console.log(err);",
									"        clearTimeout(interval);",
									"    } else {",
									"        postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"        console.log('Send Create Media Request');",
									"        pm.sendRequest(mediaObject.mediaRequest, function(err, mediaResponse) {",
									"            var mediaJsonData = mediaResponse.json();",
									"            if (err) {",
									"                console.log(err);",
									"                clearTimeout(interval);",
									"            } else {",
									"                postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"",
									"                console.log('Send Create Adspot Request');",
									"                pm.sendRequest(adSpotObject.adspotRequest, function(err, adspotResponse) {",
									"                    var jsonData = adspotResponse.json();",
									"                    if (err) {",
									"                        console.log(err);",
									"                        clearTimeout(interval);",
									"                    } else {",
									"                        postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"                        console.log('Send Create Pricing Request First');",
									"                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"                        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
									"                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                            var pricingJsonData = pricingResponse.json();",
									"                            if (err) {",
									"                                console.log(err);",
									"                                clearTimeout(interval);",
									"                            } else {",
									"                                postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"                                postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"                                postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"",
									"                                console.log('Send Create Pricing Request Second');",
									"                                postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"                                postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"                                pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                    var pricingJsonData = pricingResponse.json();",
									"                                    if (err) {",
									"                                        console.log(err);",
									"                                        clearTimeout(interval);",
									"                                    } else {",
									"                                        postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"                                        postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"",
									"                                        console.log('Send Create Pricing Request Third');",
									"                                        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"                                        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
									"                                        pm.sendRequest(pricingObject.pricingRequest, function(err, pricingResponse) {",
									"                                            var pricingJsonData = pricingResponse.json();",
									"                                            if (err) {",
									"                                                console.log(err);",
									"                                                clearTimeout(interval);",
									"                                            } else {",
									"                                                postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"                                                postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"",
									"                                            }",
									"                                        });",
									"",
									"                                    }",
									"                                });",
									"",
									"                            }",
									"                        });",
									"                    }",
									"                });",
									"            }",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by empty pricing name header.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update by non-existent pricing among others",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"        pm.test(\"verify error message is correct\", () =>{",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
									"        });",
									"",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Rule Name 'Import auto four': could not match the open pricing Rule Name to the publisher\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by non-existent among others.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update by duplicated pricing names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 400\", function() {",
									"          pm.response.to.have.status(400);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
									"        });",
									"",
									"        pm.test(\"verify error message is correct\", () =>{",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
									"        });",
									"",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
									"        });",
									"",
									"",
									"",
									"        pm.test(\"Check errror\", () =>{",
									"                                    const responseJson = pm.response.json();",
									"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Floor Price 'Import auto two': the same Rule Name already exists in row 3\");",
									"                                    });",
									"",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by duplicated_floorPrice.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV update  by emptty string in CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      //Create get JWT token of user with role=5 request",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get getObject",
									"let getPricingObject = {",
									"  ",
									"    get getPricingRequest() {",
									"",
									"        //Create get pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"            method: 'GET',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"  ",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const getOpenPricing = async () => {",
									"    const request = await reqPromise(getPricingObject.getPricingRequest);",
									"    const jsonData = await request.json();",
									"",
									"    return jsonData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('RUNNING POSTMAN TESTS');",
									"",
									"        pm.test(\"Status code is 200\", function() {",
									"          pm.response.to.have.status(200);",
									"          var jsonData = pm.response.json();",
									"",
									"        });",
									"",
									"        pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"        });",
									"",
									"        pm.test(\"Check Status\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"All records were successfully imported\");",
									"        });",
									"",
									"        console.log('Send Get Pricing First Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
									"        var getPricingJsonDataOne = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
									"",
									"        console.log('Check Updation of first open pricing after import');",
									"        pm.test(\"Check Name of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Second Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
									"        var getPricingJsonDataTwo = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
									"",
									"        console.log('Check Updation of Second open pricing after import');",
									"        pm.test(\"Check Name of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20.2\");",
									"        });",
									"",
									"",
									"",
									"        console.log('Send Get Pricing Third Request');",
									"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        var getPricingJsonDataThree = await getOpenPricing();",
									"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
									"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
									"",
									"        console.log('Check Updation of Third open pricing after import');",
									"        pm.test(\"Check Name of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"        });",
									"",
									"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
									"        });",
									"",
									"       ",
									"",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by empty String.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload CSV permission denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"",
									"});",
									"",
									"if (isImported = pm.response.to.have.status(200)) {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.test(\"Check Imported\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.imported).to.eql(3);",
									"    });",
									"",
									"    //Get getObject",
									"    let getPricingObject = {",
									"        get getPricingRequest() {",
									"",
									"            //Create get pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
									"                method: 'GET',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    //Get Jwt token of user  with role = 5",
									"    const getJwtToken = {",
									"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"mail\": \"mail74582@test.com\",",
									"                \"password\": \"Password1\"",
									"            })",
									"        }",
									"    };",
									"",
									"",
									"    //Get objectToDelete",
									"    let deletePricingObject = {",
									"        get deletePricingRequest() {",
									"",
									"            //Create delete pricing request",
									"            return {",
									"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'content-type': 'application/json',",
									"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"                },",
									"            };",
									"        }",
									"    };",
									"",
									"    console.log('Send Get Pricing First Request');",
									"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"        var getPricingJsonData = getPricingResponse.json();",
									"        if (err) {",
									"            console.log(err);",
									"            clearTimeout(interval);",
									"        } else {",
									"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
									"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
									"",
									"            console.log('Check Updation of first open pricing after import');",
									"            pm.test(\"Check Name of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
									"            });",
									"",
									"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
									"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
									"            });",
									"",
									"            console.log('Send Get Pricing Second Request');",
									"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                var getPricingJsonData = getPricingResponse.json();",
									"                if (err) {",
									"                    console.log(err);",
									"                    clearTimeout(interval);",
									"                } else {",
									"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
									"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                    console.log('Check Updation of Second open pricing after import');",
									"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
									"                    });",
									"",
									"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
									"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20.2\");",
									"                    });",
									"",
									"                    console.log('Send Get Pricing Third Request');",
									"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
									"                        var getPricingJsonData = getPricingResponse.json();",
									"                        if (err) {",
									"                            console.log(err);",
									"                            clearTimeout(interval);",
									"                        } else {",
									"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
									"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
									"",
									"                            console.log('Check Updation of Third open pricing after import');",
									"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
									"                            });",
									"",
									"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
									"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
									"                            });",
									"",
									"                            ",
									"",
									"                            //=================================DATA DELETION SECTION==================================",
									"                            console.log('Send GET Token request for user with Role=5');",
									"                            pm.sendRequest(getJwtToken, function(err, res) {",
									"                                var tokenData = res.json();",
									"                                if (err) {",
									"                                    console.log(err);",
									"                                } else {",
									"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                    console.log('Send Delete Pricing First Request');",
									"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                        if (err) {",
									"                                            console.log(err);",
									"                                            clearTimeout(interval);",
									"                                        } else {",
									"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                            console.log('Send Delete Pricing Second Request');",
									"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                if (err) {",
									"                                                    console.log(err);",
									"                                                    clearTimeout(interval);",
									"                                                } else {",
									"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"                                                    console.log('Send Delete Pricing Third Request');",
									"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
									"                                                        if (err) {",
									"                                                            console.log(err);",
									"                                                            clearTimeout(interval);",
									"                                                        } else {",
									"",
									"                                                        }",
									"                                                    });",
									"                                                }",
									"                                            });",
									"                                        }",
									"                                    });",
									"                                }",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get Publisher object",
									"let publisherObject = {",
									"    get publisherRequest() {",
									"        //Create publisher variables(name,mail,domain,account)",
									"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
									"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
									"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
									"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
									"",
									"        //Create new Publisher",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
									"                    \"currency\": \"EUR\",",
									"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
									"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
									"                    \"categoryIds\": [",
									"                        10,",
									"                        180",
									"                    ],",
									"                    \"isEnabled\": true",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get media object",
									"let mediaObject = {",
									"    get mediaRequest() {",
									"        //Create New media",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"platform\": \"Android\",",
									"                    \"platformId\": 1,",
									"                    \"categoryIds\": [",
									"                        1,",
									"                        2,",
									"                        3",
									"                    ],",
									"",
									"                    \"isEnabled\": true,",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"url\": \"http://local.host\"",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get Adspot Object",
									"let adSpotObject = {",
									"    get adspotRequest() {",
									"        //Create New adspot",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
									"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
									"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
									"                    \"categoryIds\": [1, 10, 2, 50, 392],",
									"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
									"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
									"                    \"floorPrice\": 10,",
									"                    \"floorPriceAutomated\": false,",
									"                    \"testMode\": false,",
									"                    \"enabled\": true,",
									"                    \"customSizing\": true,",
									"                    \"coppa\": true,",
									"                    \"sizeIds\": [",
									"                        10",
									"                    ],",
									"                    \"positionId\": 1,",
									"                    \"banner\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11,",
									"                        \"sizeIds\": [",
									"                            3",
									"                        ]",
									"                    },",
									"                    \"native\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 11.11",
									"                    },",
									"                    \"video\": {",
									"                        \"enabled\": true,",
									"                        \"floorPrice\": 111.111,",
									"                        \"playbackMethodIds\": [",
									"                            1,",
									"                            2",
									"                        ],",
									"                        \"sizeIds\": [",
									"                            4",
									"                        ],",
									"                        \"minDuration\": 12,",
									"                        \"maxDuration\": 22",
									"                    }",
									"                })",
									"            }",
									"        };",
									"    }",
									"};",
									"",
									"//Get prcing object",
									"let openPricingObject = {",
									"    get openPricingRequest() {",
									"",
									"        //Create new pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
									"            method: 'POST',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    \"active\": true,",
									"                    \"notes\": \"test notes\",",
									"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
									"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
									"                    \"publisherId\":",
									"",
									"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
									"",
									"                        ,",
									"                    \"rule\": {",
									"                        \"adspot\": {",
									"                            \"includedAdspots\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
									"",
									"                            ],",
									"                            \"excludedAdspots\": null",
									"                        },",
									"                        \"adFormat\": {",
									"                            \"adFormats\": [",
									"                                2",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"adSize\": {",
									"                            \"adSizes\": [",
									"                                10",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"media\": {",
									"                            \"media\": [",
									"",
									"                                parseInt(`${pm.environment.get(\"import_media_id\")}`)",
									"",
									"                            ],",
									"                            \"exclude\": null",
									"                        },",
									"                        \"deviceType\": {",
									"                            \"deviceTypes\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"geo\": {",
									"                            \"geos\": [",
									"                                221",
									"",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"deviceOS\": {",
									"                            \"deviceOSs\": [",
									"                                4",
									"                            ],",
									"                            \"exclude\": false",
									"                        },",
									"                        \"dsp\": {",
									"                            \"dsps\": [3],",
									"                            \"exclude\": false",
									"                        }",
									"                    }",
									"                })",
									"            }",
									"        };",
									"",
									"    }",
									"};",
									"",
									"//Get Jwt token of user  with role = 5",
									"let getJwtTokenObject = {",
									"",
									"    get getJwtTokenRequest() {",
									"",
									"      return{",
									"",
									"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"mail\": \"mail74582@test.com\",",
									"            \"password\": \"Password1\"",
									"        })",
									"    }",
									"  };",
									"}",
									"};",
									"",
									"//Get objectToDelete",
									"let deletePricingObject = {",
									"    get deletePricingRequest() {",
									"",
									"        //Create delete pricing request",
									"        return {",
									"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
									"            method: 'DELETE',",
									"            header: {",
									"                'content-type': 'application/json',",
									"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
									"            },",
									"        };",
									"    }",
									"};",
									"",
									"// Turns pm.sendRequest into a promise",
									"const reqPromise = (urlPath) => {",
									"",
									"    return new Promise ((resolve, reject) => {",
									"        pm.sendRequest(urlPath, function (err, response) {",
									"            if (err) reject(err);",
									"            resolve(response);",
									"        });",
									"    });",
									"}",
									"",
									"const createPublisher = async () => {",
									"    const request = await reqPromise(publisherObject.publisherRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"",
									"const createMedia = async () => {",
									"    const request = await reqPromise(mediaObject.mediaRequest);",
									"    const mediaJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
									"    ",
									"    return mediaJsonData;",
									"}",
									"",
									"const createAdSpot = async () => {",
									"    const request = await reqPromise(adSpotObject.adspotRequest);",
									"    const jsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
									"",
									"    return jsonData;",
									"}",
									"",
									"const createOpenPricingFirst = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingSecond = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const createOpenPricingThird = async () => {  ",
									"    const request = await reqPromise(openPricingObject.openPricingRequest);",
									"    const pricingJsonData = await request.json();",
									"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
									"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
									"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
									"    ",
									"    return pricingJsonData;   ",
									"}",
									"",
									"const getJwtForUserWithRoleToDelete = async () => {",
									"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
									"    const tokenData = await request.json();",
									"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
									"",
									"    return tokenData;",
									"}",
									"",
									"const deleteOpenPricing = async () => {",
									"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
									"    ",
									"}",
									"",
									"// Calls our requests in order",
									"const callRequestsInOrder = async () => {",
									"    const interval = setTimeout(() => {}, 4000);",
									"",
									"    try {",
									"",
									"        console.log('Send Create Publisher Request');        ",
									"        await createPublisher();",
									"",
									"        console.log('Send Create Media Request');",
									"        await createMedia();",
									"        ",
									"        console.log('Send Create Adspot Request');",
									"        await createAdSpot();",
									"        ",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
									"        await createOpenPricingFirst();",
									"",
									"        console.log('Send Create Pricing Request First');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
									"        await createOpenPricingSecond();",
									"         ",
									"        console.log('Send Create Pricing Request Third');",
									"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
									"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
									"        await createOpenPricingThird();",
									"        ",
									"        clearTimeout(interval);",
									"",
									"    } catch(error) {",
									"        console.log('Caught the error: ', error);",
									"",
									"        //=================================DATA DELETION SECTION==================================",
									"        console.log('Send GET Token request for user with Role=5');",
									"        await getJwtForUserWithRoleToDelete();",
									"        ",
									"        console.log('Send Delete open pricing First request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Second request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
									"        await deleteOpenPricing();",
									"",
									"        console.log('Send Delete open pricing Third request');",
									"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
									"        await deleteOpenPricing();",
									"        ",
									"        clearTimeout(interval);",
									"    }",
									"};",
									"",
									"callRequestsInOrder();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File input",
									"type": "file",
									"src": "by empty String.csv"
								},
								{
									"key": "type",
									"value": "text/csv",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"pricing",
								"open",
								"import"
							],
							"query": [
								{
									"key": "publisher_id",
									"value": "{{import_pub_id}}"
								},
								{
									"key": "mode",
									"value": "price"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "upload",
			"item": [
				{
					"name": "single",
					"item": [
						{
							"name": "Upload CSV uprate 1 out of 3 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"     }",
											"   };",
											"  }",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "1 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV uprate 3 out of 3 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(3);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update int floorPrice  to decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"    });",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"     let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql('10');",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql('30');",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                             try{",
											"                                                               console.log(\"Deleting user\")",
											"                                                            pm.sendRequest(deleteUserObject.deleteUserRequest)",
											"                                                           }catch(error){",
											"                                                               console.log(error)",
											"                                                           }",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "int to decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update decimal floorPrice to int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"    });",
											"    pm.test(\"Check imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"    });",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"     let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                             try{",
											"                                                               console.log(\"Deleting user\")",
											"                                                            pm.sendRequest(deleteUserObject.deleteUserRequest)",
											"                                                           }catch(error){",
											"                                                               console.log(error)",
											"                                                           }",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "decimal into int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update dy zero floorPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"",
											"           ",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update dy zero decimal floorPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"",
											"           ",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero to int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"    });",
											"",
											"     pm.test(\"Check status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"    });",
											"",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"     let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                ",
											"",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"                                                               console.log(\"Deleting user\")",
											"                                                            pm.sendRequest(deleteUserObject.deleteUserRequest)",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero to int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to min decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"         console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "to decimal min.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to max decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"999999.99\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "to decimal max.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by too large decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"          pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '9999999.99': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by too large decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by too large int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '99999999.00': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by too large int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-999999.00': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative integer.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-9999.99': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-0.01': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative zero.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by String value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'Number01': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by string value.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by Stringified number value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by stringified numeric value.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice by empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by emty floor price.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by empty open-pricing-name value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Rule Name '': could not match the open pricing Rule Name to the publisher\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by emty open pricing name.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice by null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'null': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by null floor price.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update floorPrice of disabled open-pricing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(3);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"         console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect floor price header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"    ",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect floorPrice header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect quantity of headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is incorrectly formatted\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect quantity of headers.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect quantity of columns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file does not have the correct number of columns\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect quantity of colunms.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload empty CSV file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is empty\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty CSV file.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV file with no data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file contains no data\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"         console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by no data.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by non-csv file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(415);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"The uploaded file is not a CSV file\");",
											"                                    });",
											"",
											"",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"          console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "non-csv.shell"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV with empty floorPrice header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(400);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(400)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"     let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            ",
											"",
											"                            pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"                              ",
											"    ",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"                                                            try{",
											"                                                               console.log(\"Deleting user\")",
											"                                                            pm.sendRequest(deleteUserObject.deleteUserRequest)",
											"                                                           }catch(error){",
											"                                                               console.log(error)",
											"                                                           }",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty floor price header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV with empty pricing name header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"          console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty pricing name header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by non-existent pricing among others",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Rule Name 'Import auto four': could not match the open pricing Rule Name to the publisher\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by non-existent among others.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by duplicated pricing names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Floor Price 'Import auto two': the same Rule Name already exists in row 3\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by duplicated_floorPrice.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  by emptty string in CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"let deleteUserObject = {",
											"  ",
											"    get deleteUserRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts/\" + `${pm.environment.get(\"import_user_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"const deleteUser = async () => {",
											"    const request = await reqPromise(deleteUserObject.deleteUserRequest);",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported because there was nothing to update\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20.2\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
											"        });",
											"",
											"       ",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        console.log('Send Delete User');",
											"       ",
											"        await deleteUser();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"mail74582@test.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"let userObject = {",
											"",
											"    get userRequest() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")",
											"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"role\": 0,",
											"                    \"isEnabled\": true,",
											"                    \"publisherId\": parseInt(pm.environment.get(\"import_pub_id\")),",
											"                    \"name\": \"singleapi\",",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"let getJwtTokenObjectSingle = {",
											"",
											"    get getJwtTokenRequestSingle() {",
											"",
											"        return {",
											"",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json'",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"mail\": \"single@api.com\",",
											"                    \"password\": \"Password1\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function(err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createSingleUser = async () => {",
											"",
											"    const request = await reqPromise(userObject.userRequest);",
											"    const userJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);",
											"    console.log(pm.environment.get(\"import_user_id\"))",
											"    return userJsonData;",
											"}",
											"",
											"const createSingleToken = async () => {",
											"    const request = await reqPromise(getJwtTokenObjectSingle.getJwtTokenRequestSingle);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwtSingle\", pricingJsonData.token);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingSecond = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const createOpenPricingThird = async () => {",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"",
											"    return pricingJsonData;",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');",
											"        await createPublisher();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Creating single user');",
											"        await createSingleUser();",
											"",
											"        console.log('Creating single jwt');",
											"        await createSingleToken();",
											"",
											"",
											"        clearTimeout(interval);",
											"",
											"    } catch (error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtSingle}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty String.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cross",
					"item": [
						{
							"name": "duplicate rule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object\r",
											"let publisherObject = {\r",
											"    get publisherRequest() {\r",
											"        //Create publisher variables(name,mail,domain,account)\r",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));\r",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));\r",
											"\r",
											"        //Create new Publisher\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,\r",
											"                    \"currency\": \"EUR\",\r",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,\r",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,\r",
											"                    \"categoryIds\": [\r",
											"                        10,\r",
											"                        180\r",
											"                    ],\r",
											"                    \"isEnabled\": true\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get media object\r",
											"let mediaObject = {\r",
											"    get mediaRequest() {\r",
											"        //Create New media\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"platform\": \"Android\",\r",
											"                    \"platformId\": 1,\r",
											"                    \"categoryIds\": [\r",
											"                        1,\r",
											"                        2,\r",
											"                        3\r",
											"                    ],\r",
											"\r",
											"                    \"isEnabled\": true,\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"url\": \"http://local.host\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Adspot Object\r",
											"let adSpotObject = {\r",
											"    get adspotRequest() {\r",
											"        //Create New adspot\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +\r",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",\r",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),\r",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"floorPrice\": 10,\r",
											"                    \"floorPriceAutomated\": false,\r",
											"                    \"testMode\": false,\r",
											"                    \"enabled\": true,\r",
											"                    \"customSizing\": true,\r",
											"                    \"coppa\": true,\r",
											"                    \"sizeIds\": [\r",
											"                        10\r",
											"                    ],\r",
											"                    \"positionId\": 1,\r",
											"                    \"banner\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11,\r",
											"                        \"sizeIds\": [\r",
											"                            3\r",
											"                        ]\r",
											"                    },\r",
											"                    \"native\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11.11\r",
											"                    },\r",
											"                    \"video\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 111.111,\r",
											"                        \"playbackMethodIds\": [\r",
											"                            1,\r",
											"                            2\r",
											"                        ],\r",
											"                        \"sizeIds\": [\r",
											"                            4\r",
											"                        ],\r",
											"                        \"minDuration\": 12,\r",
											"                        \"maxDuration\": 22\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get prcing object\r",
											"let openPricingObject = {\r",
											"    get openPricingRequest() {\r",
											"\r",
											"        //Create new pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"active\": true,\r",
											"                    \"notes\": \"test notes\",\r",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),\r",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),\r",
											"                    \"publisherId\":\r",
											"\r",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)\r",
											"\r",
											"                        ,\r",
											"                    \"rule\": {\r",
											"                        // \"adspot\": {\r",
											"                        //     \"includedAdspots\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"excludedAdspots\": null\r",
											"                        // },\r",
											"                        \"adFormat\": {\r",
											"                            \"adFormats\": [\r",
											"                                2\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"adSize\": {\r",
											"                            \"adSizes\": [\r",
											"                                10\r",
											"                            ],\r",
											"                            \"exclude\": null\r",
											"                        },\r",
											"                        // \"media\": {\r",
											"                        //     \"media\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"exclude\": null\r",
											"                        // },\r",
											"                        \"deviceType\": {\r",
											"                            \"deviceTypes\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"geo\": {\r",
											"                            \"geos\": [\r",
											"                                221\r",
											"\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"deviceOS\": {\r",
											"                            \"deviceOSs\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"dsp\": {\r",
											"                            \"dsps\": [3],\r",
											"                            \"exclude\": false\r",
											"                        }\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Jwt token of user  with role = 5\r",
											"let getJwtTokenObject = {\r",
											"\r",
											"    get getJwtTokenRequest() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"mail74582@test.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"//Get objectToDelete\r",
											"let deletePricingObject = {\r",
											"    get deletePricingRequest() {\r",
											"\r",
											"        //Create delete pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`\r",
											"            },\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectAdmin = {\r",
											"\r",
											"    get getJwtTokenRequestAdmin() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"maxim@api.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"let userObject = {\r",
											"\r",
											"    get userRequest() {\r",
											"\r",
											"      return {\r",
											"\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")\r",
											"\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"role\": 1,\r",
											"                    \"isEnabled\": true,\r",
											"                    \"publisherId\":parseInt(pm.environment.get(\"import_pub_id\")),\r",
											"                    \"name\": \"crossApiGuy1\",\r",
											"                    \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"                    \"password\": \"Password1\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectCross = {\r",
											"\r",
											"    get getJwtTokenRequestCross() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"// Turns pm.sendRequest into a promise\r",
											"const reqPromise = (urlPath) => {\r",
											"\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(urlPath, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"const createCrossUser = async () => { \r",
											"    \r",
											"    const request = await reqPromise(userObject.userRequest);\r",
											"    const userJsonData = await request.json();\r",
											"     postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);\r",
											"    return userJsonData;   \r",
											"}\r",
											"\r",
											"const createCrossToken= async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectCross.getJwtTokenRequestCross);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwtCross\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createPublisher = async () => {\r",
											"    const request = await reqPromise(publisherObject.publisherRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"\r",
											"const createMedia = async () => {\r",
											"    const request = await reqPromise(mediaObject.mediaRequest);\r",
											"    const mediaJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);\r",
											"    \r",
											"    return mediaJsonData;\r",
											"}\r",
											"\r",
											"const createAdSpot = async () => {\r",
											"    const request = await reqPromise(adSpotObject.adspotRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"const createAdminToken = async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectAdmin.getJwtTokenRequestAdmin);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingFirst = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingSecond = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingThird = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const getJwtForUserWithRoleToDelete = async () => {\r",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);\r",
											"    const tokenData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);\r",
											"\r",
											"    return tokenData;\r",
											"}\r",
											"\r",
											"const deleteOpenPricing = async () => {\r",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);\r",
											"    \r",
											"}\r",
											"\r",
											"// Calls our requests in order\r",
											"const callRequestsInOrder = async () => {\r",
											"    const interval = setTimeout(() => {}, 4000);\r",
											"\r",
											"    try {\r",
											"\r",
											"        console.log('Creating admin jwt');\r",
											"        await createAdminToken();\r",
											"\r",
											"        console.log('Send Create Publisher Request');        \r",
											"        await createPublisher();\r",
											"\r",
											"        // console.log('Send Create Media Request');\r",
											"        // await createMedia();\r",
											"        \r",
											"        // console.log('Send Create Adspot Request');\r",
											"        // await createAdSpot();\r",
											"        \r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");\r",
											"        await createOpenPricingFirst();\r",
											"\r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");\r",
											"        await createOpenPricingSecond();\r",
											"         \r",
											"        console.log('Send Create Pricing Request Third');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");\r",
											"        await createOpenPricingThird();\r",
											"\r",
											"           console.log('Creating cross user');\r",
											"        await createCrossUser();\r",
											"\r",
											"        console.log('Creating cross jwt');\r",
											"        await createCrossToken();\r",
											"\r",
											"        \r",
											"        clearTimeout(interval);\r",
											"\r",
											"    } catch(error) {\r",
											"        console.log('Caught the error: ', error);\r",
											"\r",
											"        //=================================DATA DELETION SECTION==================================\r",
											"        console.log('Send GET Token request for user with Role=5');\r",
											"        await getJwtForUserWithRoleToDelete();\r",
											"        \r",
											"        console.log('Send Delete open pricing First request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Second request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Third request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"     \r",
											"        \r",
											"        clearTimeout(interval);\r",
											"    }\r",
											"};\r",
											"\r",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"        const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.errors[0]).to.be.contains(\"Row 3, Floor Price 'Import auto one': the same Rule Name already exists in row 2\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")\r",
											"    });\r",
											"\r",
											"const deletelocationOpenPricing = pm.environment.get(\"url\")\r",
											"    .concat(\"/v3/pricing/open/\")\r",
											"\r",
											"const deletelocationMedia = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/media/\")\r",
											"\r",
											"const deletelocationAdSpot = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/adspots/\")\r",
											"\r",
											"const deletelocationPublisher = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/publishers/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing + pm.environment.get(\"import_pricing_id_one\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_two\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_three\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationMedia +  pm.environment.get(\"import_media_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationAdSpot +  pm.environment.get(\"import_adspot_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"const deletelocationUser = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/accounts/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationUser +  pm.environment.get(\"import_user_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"// pm.sendRequest({\r",
											"//   method: 'DELETE',\r",
											"//   url: deletelocationPublisher +  pm.environment.get(\"import_pub_id\"),\r",
											"//   header: {\r",
											"//     \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"//     'Content-Type': 'application/json'\r",
											"//   },\r",
											"// })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtCross}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3068duplicate.csv"
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong price (not num)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object\r",
											"let publisherObject = {\r",
											"    get publisherRequest() {\r",
											"        //Create publisher variables(name,mail,domain,account)\r",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));\r",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));\r",
											"\r",
											"        //Create new Publisher\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,\r",
											"                    \"currency\": \"EUR\",\r",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,\r",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,\r",
											"                    \"categoryIds\": [\r",
											"                        10,\r",
											"                        180\r",
											"                    ],\r",
											"                    \"isEnabled\": true\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get media object\r",
											"let mediaObject = {\r",
											"    get mediaRequest() {\r",
											"        //Create New media\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"platform\": \"Android\",\r",
											"                    \"platformId\": 1,\r",
											"                    \"categoryIds\": [\r",
											"                        1,\r",
											"                        2,\r",
											"                        3\r",
											"                    ],\r",
											"\r",
											"                    \"isEnabled\": true,\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"url\": \"http://local.host\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Adspot Object\r",
											"let adSpotObject = {\r",
											"    get adspotRequest() {\r",
											"        //Create New adspot\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +\r",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",\r",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),\r",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"floorPrice\": 10,\r",
											"                    \"floorPriceAutomated\": false,\r",
											"                    \"testMode\": false,\r",
											"                    \"enabled\": true,\r",
											"                    \"customSizing\": true,\r",
											"                    \"coppa\": true,\r",
											"                    \"sizeIds\": [\r",
											"                        10\r",
											"                    ],\r",
											"                    \"positionId\": 1,\r",
											"                    \"banner\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11,\r",
											"                        \"sizeIds\": [\r",
											"                            3\r",
											"                        ]\r",
											"                    },\r",
											"                    \"native\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11.11\r",
											"                    },\r",
											"                    \"video\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 111.111,\r",
											"                        \"playbackMethodIds\": [\r",
											"                            1,\r",
											"                            2\r",
											"                        ],\r",
											"                        \"sizeIds\": [\r",
											"                            4\r",
											"                        ],\r",
											"                        \"minDuration\": 12,\r",
											"                        \"maxDuration\": 22\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get prcing object\r",
											"let openPricingObject = {\r",
											"    get openPricingRequest() {\r",
											"\r",
											"        //Create new pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"active\": true,\r",
											"                    \"notes\": \"test notes\",\r",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),\r",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),\r",
											"                    \"publisherId\":\r",
											"\r",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)\r",
											"\r",
											"                        ,\r",
											"                    \"rule\": {\r",
											"                        // \"adspot\": {\r",
											"                        //     \"includedAdspots\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"excludedAdspots\": null\r",
											"                        // },\r",
											"                        \"adFormat\": {\r",
											"                            \"adFormats\": [\r",
											"                                2\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"adSize\": {\r",
											"                            \"adSizes\": [\r",
											"                                10\r",
											"                            ],\r",
											"                            \"exclude\": null\r",
											"                        },\r",
											"                        // \"media\": {\r",
											"                        //     \"media\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"exclude\": null\r",
											"                        // },\r",
											"                        \"deviceType\": {\r",
											"                            \"deviceTypes\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"geo\": {\r",
											"                            \"geos\": [\r",
											"                                221\r",
											"\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"deviceOS\": {\r",
											"                            \"deviceOSs\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"dsp\": {\r",
											"                            \"dsps\": [3],\r",
											"                            \"exclude\": false\r",
											"                        }\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Jwt token of user  with role = 5\r",
											"let getJwtTokenObject = {\r",
											"\r",
											"    get getJwtTokenRequest() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"mail74582@test.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"//Get objectToDelete\r",
											"let deletePricingObject = {\r",
											"    get deletePricingRequest() {\r",
											"\r",
											"        //Create delete pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`\r",
											"            },\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectAdmin = {\r",
											"\r",
											"    get getJwtTokenRequestAdmin() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"maxim@api.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"let userObject = {\r",
											"\r",
											"    get userRequest() {\r",
											"\r",
											"      return {\r",
											"\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")\r",
											"\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"role\": 1,\r",
											"                    \"isEnabled\": true,\r",
											"                    \"publisherId\":parseInt(pm.environment.get(\"import_pub_id\")),\r",
											"                    \"name\": \"crossApiGuy1\",\r",
											"                    \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"                    \"password\": \"Password1\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectCross = {\r",
											"\r",
											"    get getJwtTokenRequestCross() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"// Turns pm.sendRequest into a promise\r",
											"const reqPromise = (urlPath) => {\r",
											"\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(urlPath, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"const createCrossUser = async () => { \r",
											"    \r",
											"    const request = await reqPromise(userObject.userRequest);\r",
											"    const userJsonData = await request.json();\r",
											"     postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);\r",
											"    return userJsonData;   \r",
											"}\r",
											"\r",
											"const createCrossToken= async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectCross.getJwtTokenRequestCross);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwtCross\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createPublisher = async () => {\r",
											"    const request = await reqPromise(publisherObject.publisherRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"\r",
											"const createMedia = async () => {\r",
											"    const request = await reqPromise(mediaObject.mediaRequest);\r",
											"    const mediaJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);\r",
											"    \r",
											"    return mediaJsonData;\r",
											"}\r",
											"\r",
											"const createAdSpot = async () => {\r",
											"    const request = await reqPromise(adSpotObject.adspotRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"const createAdminToken = async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectAdmin.getJwtTokenRequestAdmin);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingFirst = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingSecond = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingThird = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const getJwtForUserWithRoleToDelete = async () => {\r",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);\r",
											"    const tokenData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);\r",
											"\r",
											"    return tokenData;\r",
											"}\r",
											"\r",
											"const deleteOpenPricing = async () => {\r",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);\r",
											"    \r",
											"}\r",
											"\r",
											"// Calls our requests in order\r",
											"const callRequestsInOrder = async () => {\r",
											"    const interval = setTimeout(() => {}, 4000);\r",
											"\r",
											"    try {\r",
											"\r",
											"        console.log('Creating admin jwt');\r",
											"        await createAdminToken();\r",
											"\r",
											"        console.log('Send Create Publisher Request');        \r",
											"        await createPublisher();\r",
											"\r",
											"        // console.log('Send Create Media Request');\r",
											"        // await createMedia();\r",
											"        \r",
											"        // console.log('Send Create Adspot Request');\r",
											"        // await createAdSpot();\r",
											"        \r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");\r",
											"        await createOpenPricingFirst();\r",
											"\r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");\r",
											"        await createOpenPricingSecond();\r",
											"         \r",
											"        console.log('Send Create Pricing Request Third');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");\r",
											"        await createOpenPricingThird();\r",
											"\r",
											"           console.log('Creating cross user');\r",
											"        await createCrossUser();\r",
											"\r",
											"        console.log('Creating cross jwt');\r",
											"        await createCrossToken();\r",
											"\r",
											"        \r",
											"        clearTimeout(interval);\r",
											"\r",
											"    } catch(error) {\r",
											"        console.log('Caught the error: ', error);\r",
											"\r",
											"        //=================================DATA DELETION SECTION==================================\r",
											"        console.log('Send GET Token request for user with Role=5');\r",
											"        await getJwtForUserWithRoleToDelete();\r",
											"        \r",
											"        console.log('Send Delete open pricing First request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Second request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Third request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"     \r",
											"        \r",
											"        clearTimeout(interval);\r",
											"    }\r",
											"};\r",
											"\r",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"        const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.errors[0]).to.be.contains(\"Row 5, Floor Price 'asd': not a valid value\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")\r",
											"    });\r",
											"\r",
											"const deletelocationOpenPricing = pm.environment.get(\"url\")\r",
											"    .concat(\"/v3/pricing/open/\")\r",
											"\r",
											"const deletelocationMedia = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/media/\")\r",
											"\r",
											"const deletelocationAdSpot = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/adspots/\")\r",
											"\r",
											"const deletelocationPublisher = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/publishers/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing + pm.environment.get(\"import_pricing_id_one\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_two\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_three\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_four\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationMedia +  pm.environment.get(\"import_media_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationAdSpot +  pm.environment.get(\"import_adspot_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"const deletelocationUser = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/accounts/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationUser +  pm.environment.get(\"import_user_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"// pm.sendRequest({\r",
											"//   method: 'DELETE',\r",
											"//   url: deletelocationPublisher +  pm.environment.get(\"import_pub_id\"),\r",
											"//   header: {\r",
											"//     \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"//     'Content-Type': 'application/json'\r",
											"//   },\r",
											"// })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtCross}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3068 not int.csv"
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong price (num out of bounds)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"        const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.errors[0]).to.be.contains(\"Row 4, Floor Price '1111110000000000000.00': A valid price is between 0.00 and 999,999.99\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")\r",
											"    });\r",
											"\r",
											"const deletelocationOpenPricing = pm.environment.get(\"url\")\r",
											"    .concat(\"/v3/pricing/open/\")\r",
											"\r",
											"const deletelocationMedia = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/media/\")\r",
											"\r",
											"const deletelocationAdSpot = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/adspots/\")\r",
											"\r",
											"const deletelocationPublisher = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/publishers/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing + pm.environment.get(\"import_pricing_id_one\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_two\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_three\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_four\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationMedia +  pm.environment.get(\"import_media_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationAdSpot +  pm.environment.get(\"import_adspot_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"const deletelocationUser = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/accounts/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationUser +  pm.environment.get(\"import_user_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"// pm.sendRequest({\r",
											"//   method: 'DELETE',\r",
											"//   url: deletelocationPublisher +  pm.environment.get(\"import_pub_id\"),\r",
											"//   header: {\r",
											"//     \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"//     'Content-Type': 'application/json'\r",
											"//   },\r",
											"// })\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object\r",
											"let publisherObject = {\r",
											"    get publisherRequest() {\r",
											"        //Create publisher variables(name,mail,domain,account)\r",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));\r",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));\r",
											"\r",
											"        //Create new Publisher\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,\r",
											"                    \"currency\": \"EUR\",\r",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,\r",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,\r",
											"                    \"categoryIds\": [\r",
											"                        10,\r",
											"                        180\r",
											"                    ],\r",
											"                    \"isEnabled\": true\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get media object\r",
											"let mediaObject = {\r",
											"    get mediaRequest() {\r",
											"        //Create New media\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"platform\": \"Android\",\r",
											"                    \"platformId\": 1,\r",
											"                    \"categoryIds\": [\r",
											"                        1,\r",
											"                        2,\r",
											"                        3\r",
											"                    ],\r",
											"\r",
											"                    \"isEnabled\": true,\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"url\": \"http://local.host\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Adspot Object\r",
											"let adSpotObject = {\r",
											"    get adspotRequest() {\r",
											"        //Create New adspot\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +\r",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",\r",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),\r",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"floorPrice\": 10,\r",
											"                    \"floorPriceAutomated\": false,\r",
											"                    \"testMode\": false,\r",
											"                    \"enabled\": true,\r",
											"                    \"customSizing\": true,\r",
											"                    \"coppa\": true,\r",
											"                    \"sizeIds\": [\r",
											"                        10\r",
											"                    ],\r",
											"                    \"positionId\": 1,\r",
											"                    \"banner\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11,\r",
											"                        \"sizeIds\": [\r",
											"                            3\r",
											"                        ]\r",
											"                    },\r",
											"                    \"native\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11.11\r",
											"                    },\r",
											"                    \"video\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 111.111,\r",
											"                        \"playbackMethodIds\": [\r",
											"                            1,\r",
											"                            2\r",
											"                        ],\r",
											"                        \"sizeIds\": [\r",
											"                            4\r",
											"                        ],\r",
											"                        \"minDuration\": 12,\r",
											"                        \"maxDuration\": 22\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get prcing object\r",
											"let openPricingObject = {\r",
											"    get openPricingRequest() {\r",
											"\r",
											"        //Create new pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"active\": true,\r",
											"                    \"notes\": \"test notes\",\r",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),\r",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),\r",
											"                    \"publisherId\":\r",
											"\r",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)\r",
											"\r",
											"                        ,\r",
											"                    \"rule\": {\r",
											"                        // \"adspot\": {\r",
											"                        //     \"includedAdspots\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"excludedAdspots\": null\r",
											"                        // },\r",
											"                        \"adFormat\": {\r",
											"                            \"adFormats\": [\r",
											"                                2\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"adSize\": {\r",
											"                            \"adSizes\": [\r",
											"                                10\r",
											"                            ],\r",
											"                            \"exclude\": null\r",
											"                        },\r",
											"                        // \"media\": {\r",
											"                        //     \"media\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"exclude\": null\r",
											"                        // },\r",
											"                        \"deviceType\": {\r",
											"                            \"deviceTypes\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"geo\": {\r",
											"                            \"geos\": [\r",
											"                                221\r",
											"\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"deviceOS\": {\r",
											"                            \"deviceOSs\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"dsp\": {\r",
											"                            \"dsps\": [3],\r",
											"                            \"exclude\": false\r",
											"                        }\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Jwt token of user  with role = 5\r",
											"let getJwtTokenObject = {\r",
											"\r",
											"    get getJwtTokenRequest() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"mail74582@test.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"//Get objectToDelete\r",
											"let deletePricingObject = {\r",
											"    get deletePricingRequest() {\r",
											"\r",
											"        //Create delete pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`\r",
											"            },\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectAdmin = {\r",
											"\r",
											"    get getJwtTokenRequestAdmin() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"maxim@api.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"let userObject = {\r",
											"\r",
											"    get userRequest() {\r",
											"\r",
											"      return {\r",
											"\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")\r",
											"\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"role\": 1,\r",
											"                    \"isEnabled\": true,\r",
											"                    \"publisherId\":parseInt(pm.environment.get(\"import_pub_id\")),\r",
											"                    \"name\": \"crossApiGuy1\",\r",
											"                    \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"                    \"password\": \"Password1\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectCross = {\r",
											"\r",
											"    get getJwtTokenRequestCross() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"// Turns pm.sendRequest into a promise\r",
											"const reqPromise = (urlPath) => {\r",
											"\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(urlPath, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"const createCrossUser = async () => { \r",
											"    \r",
											"    const request = await reqPromise(userObject.userRequest);\r",
											"    const userJsonData = await request.json();\r",
											"     postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);\r",
											"    return userJsonData;   \r",
											"}\r",
											"\r",
											"const createCrossToken= async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectCross.getJwtTokenRequestCross);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwtCross\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createPublisher = async () => {\r",
											"    const request = await reqPromise(publisherObject.publisherRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"\r",
											"const createMedia = async () => {\r",
											"    const request = await reqPromise(mediaObject.mediaRequest);\r",
											"    const mediaJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);\r",
											"    \r",
											"    return mediaJsonData;\r",
											"}\r",
											"\r",
											"const createAdSpot = async () => {\r",
											"    const request = await reqPromise(adSpotObject.adspotRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"const createAdminToken = async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectAdmin.getJwtTokenRequestAdmin);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingFirst = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingSecond = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingThird = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const getJwtForUserWithRoleToDelete = async () => {\r",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);\r",
											"    const tokenData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);\r",
											"\r",
											"    return tokenData;\r",
											"}\r",
											"\r",
											"const deleteOpenPricing = async () => {\r",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);\r",
											"    \r",
											"}\r",
											"\r",
											"// Calls our requests in order\r",
											"const callRequestsInOrder = async () => {\r",
											"    const interval = setTimeout(() => {}, 4000);\r",
											"\r",
											"    try {\r",
											"\r",
											"        console.log('Creating admin jwt');\r",
											"        await createAdminToken();\r",
											"\r",
											"        console.log('Send Create Publisher Request');        \r",
											"        await createPublisher();\r",
											"\r",
											"        // console.log('Send Create Media Request');\r",
											"        // await createMedia();\r",
											"        \r",
											"        // console.log('Send Create Adspot Request');\r",
											"        // await createAdSpot();\r",
											"        \r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");\r",
											"        await createOpenPricingFirst();\r",
											"\r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");\r",
											"        await createOpenPricingSecond();\r",
											"         \r",
											"        console.log('Send Create Pricing Request Third');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");\r",
											"        await createOpenPricingThird();\r",
											"\r",
											"           console.log('Creating cross user');\r",
											"        await createCrossUser();\r",
											"\r",
											"        console.log('Creating cross jwt');\r",
											"        await createCrossToken();\r",
											"\r",
											"        \r",
											"        clearTimeout(interval);\r",
											"\r",
											"    } catch(error) {\r",
											"        console.log('Caught the error: ', error);\r",
											"\r",
											"        //=================================DATA DELETION SECTION==================================\r",
											"        console.log('Send GET Token request for user with Role=5');\r",
											"        await getJwtForUserWithRoleToDelete();\r",
											"        \r",
											"        console.log('Send Delete open pricing First request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Second request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Third request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"     \r",
											"        \r",
											"        clearTimeout(interval);\r",
											"    }\r",
											"};\r",
											"\r",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtCross}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3068 int out of bounds.csv"
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "non-existent rule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object\r",
											"let publisherObject = {\r",
											"    get publisherRequest() {\r",
											"        //Create publisher variables(name,mail,domain,account)\r",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));\r",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));\r",
											"\r",
											"        //Create new Publisher\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,\r",
											"                    \"currency\": \"EUR\",\r",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,\r",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,\r",
											"                    \"categoryIds\": [\r",
											"                        10,\r",
											"                        180\r",
											"                    ],\r",
											"                    \"isEnabled\": true\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get media object\r",
											"let mediaObject = {\r",
											"    get mediaRequest() {\r",
											"        //Create New media\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"platform\": \"Android\",\r",
											"                    \"platformId\": 1,\r",
											"                    \"categoryIds\": [\r",
											"                        1,\r",
											"                        2,\r",
											"                        3\r",
											"                    ],\r",
											"\r",
											"                    \"isEnabled\": true,\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"url\": \"http://local.host\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Adspot Object\r",
											"let adSpotObject = {\r",
											"    get adspotRequest() {\r",
											"        //Create New adspot\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +\r",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",\r",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),\r",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"floorPrice\": 10,\r",
											"                    \"floorPriceAutomated\": false,\r",
											"                    \"testMode\": false,\r",
											"                    \"enabled\": true,\r",
											"                    \"customSizing\": true,\r",
											"                    \"coppa\": true,\r",
											"                    \"sizeIds\": [\r",
											"                        10\r",
											"                    ],\r",
											"                    \"positionId\": 1,\r",
											"                    \"banner\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11,\r",
											"                        \"sizeIds\": [\r",
											"                            3\r",
											"                        ]\r",
											"                    },\r",
											"                    \"native\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11.11\r",
											"                    },\r",
											"                    \"video\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 111.111,\r",
											"                        \"playbackMethodIds\": [\r",
											"                            1,\r",
											"                            2\r",
											"                        ],\r",
											"                        \"sizeIds\": [\r",
											"                            4\r",
											"                        ],\r",
											"                        \"minDuration\": 12,\r",
											"                        \"maxDuration\": 22\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get prcing object\r",
											"let openPricingObject = {\r",
											"    get openPricingRequest() {\r",
											"\r",
											"        //Create new pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"active\": true,\r",
											"                    \"notes\": \"test notes\",\r",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),\r",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),\r",
											"                    \"publisherId\":\r",
											"\r",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)\r",
											"\r",
											"                        ,\r",
											"                    \"rule\": {\r",
											"                        // \"adspot\": {\r",
											"                        //     \"includedAdspots\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"excludedAdspots\": null\r",
											"                        // },\r",
											"                        \"adFormat\": {\r",
											"                            \"adFormats\": [\r",
											"                                2\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"adSize\": {\r",
											"                            \"adSizes\": [\r",
											"                                10\r",
											"                            ],\r",
											"                            \"exclude\": null\r",
											"                        },\r",
											"                        // \"media\": {\r",
											"                        //     \"media\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"exclude\": null\r",
											"                        // },\r",
											"                        \"deviceType\": {\r",
											"                            \"deviceTypes\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"geo\": {\r",
											"                            \"geos\": [\r",
											"                                221\r",
											"\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"deviceOS\": {\r",
											"                            \"deviceOSs\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"dsp\": {\r",
											"                            \"dsps\": [3],\r",
											"                            \"exclude\": false\r",
											"                        }\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Jwt token of user  with role = 5\r",
											"let getJwtTokenObject = {\r",
											"\r",
											"    get getJwtTokenRequest() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"mail74582@test.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"//Get objectToDelete\r",
											"let deletePricingObject = {\r",
											"    get deletePricingRequest() {\r",
											"\r",
											"        //Create delete pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`\r",
											"            },\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectAdmin = {\r",
											"\r",
											"    get getJwtTokenRequestAdmin() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"maxim@api.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"let userObject = {\r",
											"\r",
											"    get userRequest() {\r",
											"\r",
											"      return {\r",
											"\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")\r",
											"\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"role\": 1,\r",
											"                    \"isEnabled\": true,\r",
											"                    \"publisherId\":parseInt(pm.environment.get(\"import_pub_id\")),\r",
											"                    \"name\": \"crossApiGuy1\",\r",
											"                    \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"                    \"password\": \"Password1\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectCross = {\r",
											"\r",
											"    get getJwtTokenRequestCross() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"// Turns pm.sendRequest into a promise\r",
											"const reqPromise = (urlPath) => {\r",
											"\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(urlPath, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"const createCrossUser = async () => { \r",
											"    \r",
											"    const request = await reqPromise(userObject.userRequest);\r",
											"    const userJsonData = await request.json();\r",
											"     postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);\r",
											"    return userJsonData;   \r",
											"}\r",
											"\r",
											"const createCrossToken= async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectCross.getJwtTokenRequestCross);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwtCross\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createPublisher = async () => {\r",
											"    const request = await reqPromise(publisherObject.publisherRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"\r",
											"const createMedia = async () => {\r",
											"    const request = await reqPromise(mediaObject.mediaRequest);\r",
											"    const mediaJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);\r",
											"    \r",
											"    return mediaJsonData;\r",
											"}\r",
											"\r",
											"const createAdSpot = async () => {\r",
											"    const request = await reqPromise(adSpotObject.adspotRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"const createAdminToken = async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectAdmin.getJwtTokenRequestAdmin);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingFirst = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingSecond = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingThird = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const getJwtForUserWithRoleToDelete = async () => {\r",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);\r",
											"    const tokenData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);\r",
											"\r",
											"    return tokenData;\r",
											"}\r",
											"\r",
											"const deleteOpenPricing = async () => {\r",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);\r",
											"    \r",
											"}\r",
											"\r",
											"// Calls our requests in order\r",
											"const callRequestsInOrder = async () => {\r",
											"    const interval = setTimeout(() => {}, 4000);\r",
											"\r",
											"    try {\r",
											"\r",
											"        console.log('Creating admin jwt');\r",
											"        await createAdminToken();\r",
											"\r",
											"        console.log('Send Create Publisher Request');        \r",
											"        await createPublisher();\r",
											"\r",
											"        // console.log('Send Create Media Request');\r",
											"        // await createMedia();\r",
											"        \r",
											"        // console.log('Send Create Adspot Request');\r",
											"        // await createAdSpot();\r",
											"        \r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");\r",
											"        await createOpenPricingFirst();\r",
											"\r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");\r",
											"        await createOpenPricingSecond();\r",
											"         \r",
											"        console.log('Send Create Pricing Request Third');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");\r",
											"        await createOpenPricingThird();\r",
											"\r",
											"           console.log('Creating cross user');\r",
											"        await createCrossUser();\r",
											"\r",
											"        console.log('Creating cross jwt');\r",
											"        await createCrossToken();\r",
											"\r",
											"        \r",
											"        clearTimeout(interval);\r",
											"\r",
											"    } catch(error) {\r",
											"        console.log('Caught the error: ', error);\r",
											"\r",
											"        //=================================DATA DELETION SECTION==================================\r",
											"        console.log('Send GET Token request for user with Role=5');\r",
											"        await getJwtForUserWithRoleToDelete();\r",
											"        \r",
											"        console.log('Send Delete open pricing First request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Second request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Third request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"     \r",
											"        \r",
											"        clearTimeout(interval);\r",
											"    }\r",
											"};\r",
											"\r",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"        const responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.errors[0]).to.be.contains(\"Row 4, Rule Name 'ran': could not match the open pricing Rule Name to the publisher\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")\r",
											"    });\r",
											"\r",
											"const deletelocationOpenPricing = pm.environment.get(\"url\")\r",
											"    .concat(\"/v3/pricing/open/\")\r",
											"\r",
											"const deletelocationMedia = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/media/\")\r",
											"\r",
											"const deletelocationAdSpot = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/adspots/\")\r",
											"\r",
											"const deletelocationPublisher = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/publishers/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing + pm.environment.get(\"import_pricing_id_one\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_two\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_three\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_four\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationMedia +  pm.environment.get(\"import_media_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationAdSpot +  pm.environment.get(\"import_adspot_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"const deletelocationUser = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/accounts/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationUser +  pm.environment.get(\"import_user_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"// pm.sendRequest({\r",
											"//   method: 'DELETE',\r",
											"//   url: deletelocationPublisher +  pm.environment.get(\"import_pub_id\"),\r",
											"//   header: {\r",
											"//     \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"//     'Content-Type': 'application/json'\r",
											"//   },\r",
											"// })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtCross}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3036non existent.csv"
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong csv format (wrong num of columns)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object\r",
											"let publisherObject = {\r",
											"    get publisherRequest() {\r",
											"        //Create publisher variables(name,mail,domain,account)\r",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));\r",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");\r",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));\r",
											"\r",
											"        //Create new Publisher\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,\r",
											"                    \"currency\": \"EUR\",\r",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,\r",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,\r",
											"                    \"categoryIds\": [\r",
											"                        10,\r",
											"                        180\r",
											"                    ],\r",
											"                    \"isEnabled\": true\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get media object\r",
											"let mediaObject = {\r",
											"    get mediaRequest() {\r",
											"        //Create New media\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"platform\": \"Android\",\r",
											"                    \"platformId\": 1,\r",
											"                    \"categoryIds\": [\r",
											"                        1,\r",
											"                        2,\r",
											"                        3\r",
											"                    ],\r",
											"\r",
											"                    \"isEnabled\": true,\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"url\": \"http://local.host\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Adspot Object\r",
											"let adSpotObject = {\r",
											"    get adspotRequest() {\r",
											"        //Create New adspot\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +\r",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",\r",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),\r",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],\r",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),\r",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,\r",
											"                    \"floorPrice\": 10,\r",
											"                    \"floorPriceAutomated\": false,\r",
											"                    \"testMode\": false,\r",
											"                    \"enabled\": true,\r",
											"                    \"customSizing\": true,\r",
											"                    \"coppa\": true,\r",
											"                    \"sizeIds\": [\r",
											"                        10\r",
											"                    ],\r",
											"                    \"positionId\": 1,\r",
											"                    \"banner\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11,\r",
											"                        \"sizeIds\": [\r",
											"                            3\r",
											"                        ]\r",
											"                    },\r",
											"                    \"native\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 11.11\r",
											"                    },\r",
											"                    \"video\": {\r",
											"                        \"enabled\": true,\r",
											"                        \"floorPrice\": 111.111,\r",
											"                        \"playbackMethodIds\": [\r",
											"                            1,\r",
											"                            2\r",
											"                        ],\r",
											"                        \"sizeIds\": [\r",
											"                            4\r",
											"                        ],\r",
											"                        \"minDuration\": 12,\r",
											"                        \"maxDuration\": 22\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get prcing object\r",
											"let openPricingObject = {\r",
											"    get openPricingRequest() {\r",
											"\r",
											"        //Create new pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"active\": true,\r",
											"                    \"notes\": \"test notes\",\r",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),\r",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),\r",
											"                    \"publisherId\":\r",
											"\r",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)\r",
											"\r",
											"                        ,\r",
											"                    \"rule\": {\r",
											"                        // \"adspot\": {\r",
											"                        //     \"includedAdspots\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"excludedAdspots\": null\r",
											"                        // },\r",
											"                        \"adFormat\": {\r",
											"                            \"adFormats\": [\r",
											"                                2\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"adSize\": {\r",
											"                            \"adSizes\": [\r",
											"                                10\r",
											"                            ],\r",
											"                            \"exclude\": null\r",
											"                        },\r",
											"                        // \"media\": {\r",
											"                        //     \"media\": [\r",
											"\r",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)\r",
											"\r",
											"                        //     ],\r",
											"                        //     \"exclude\": null\r",
											"                        // },\r",
											"                        \"deviceType\": {\r",
											"                            \"deviceTypes\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"geo\": {\r",
											"                            \"geos\": [\r",
											"                                221\r",
											"\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"deviceOS\": {\r",
											"                            \"deviceOSs\": [\r",
											"                                4\r",
											"                            ],\r",
											"                            \"exclude\": false\r",
											"                        },\r",
											"                        \"dsp\": {\r",
											"                            \"dsps\": [3],\r",
											"                            \"exclude\": false\r",
											"                        }\r",
											"                    }\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"\r",
											"    }\r",
											"};\r",
											"\r",
											"//Get Jwt token of user  with role = 5\r",
											"let getJwtTokenObject = {\r",
											"\r",
											"    get getJwtTokenRequest() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"mail74582@test.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"//Get objectToDelete\r",
											"let deletePricingObject = {\r",
											"    get deletePricingRequest() {\r",
											"\r",
											"        //Create delete pricing request\r",
											"        return {\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`\r",
											"            },\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectAdmin = {\r",
											"\r",
											"    get getJwtTokenRequestAdmin() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"maxim@api.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"let userObject = {\r",
											"\r",
											"    get userRequest() {\r",
											"\r",
											"      return {\r",
											"\r",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/accounts\",\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'content-type': 'application/json',\r",
											"                'Authorization': \"Bearer \" + pm.environment.get(\"jwt\")\r",
											"\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"role\": 1,\r",
											"                    \"isEnabled\": true,\r",
											"                    \"publisherId\":parseInt(pm.environment.get(\"import_pub_id\")),\r",
											"                    \"name\": \"crossApiGuy1\",\r",
											"                    \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"                    \"password\": \"Password1\"\r",
											"                })\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"};\r",
											"\r",
											"let getJwtTokenObjectCross = {\r",
											"\r",
											"    get getJwtTokenRequestCross() {\r",
											"\r",
											"      return{\r",
											"\r",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mail\": \"crossApiGuy11@rakuten.com\",\r",
											"            \"password\": \"Password1\"\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"}\r",
											"};\r",
											"\r",
											"// Turns pm.sendRequest into a promise\r",
											"const reqPromise = (urlPath) => {\r",
											"\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(urlPath, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"const createCrossUser = async () => { \r",
											"    \r",
											"    const request = await reqPromise(userObject.userRequest);\r",
											"    const userJsonData = await request.json();\r",
											"     postman.setEnvironmentVariable(\"import_user_id\", userJsonData.id);\r",
											"    return userJsonData;   \r",
											"}\r",
											"\r",
											"const createCrossToken= async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectCross.getJwtTokenRequestCross);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwtCross\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createPublisher = async () => {\r",
											"    const request = await reqPromise(publisherObject.publisherRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"\r",
											"const createMedia = async () => {\r",
											"    const request = await reqPromise(mediaObject.mediaRequest);\r",
											"    const mediaJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);\r",
											"    \r",
											"    return mediaJsonData;\r",
											"}\r",
											"\r",
											"const createAdSpot = async () => {\r",
											"    const request = await reqPromise(adSpotObject.adspotRequest);\r",
											"    const jsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);\r",
											"\r",
											"    return jsonData;\r",
											"}\r",
											"\r",
											"const createAdminToken = async () => {  \r",
											"    const request = await reqPromise(getJwtTokenObjectAdmin.getJwtTokenRequestAdmin);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt\", pricingJsonData.token);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingFirst = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingSecond = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const createOpenPricingThird = async () => {  \r",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);\r",
											"    const pricingJsonData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);\r",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);\r",
											"    \r",
											"    return pricingJsonData;   \r",
											"}\r",
											"\r",
											"const getJwtForUserWithRoleToDelete = async () => {\r",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);\r",
											"    const tokenData = await request.json();\r",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);\r",
											"\r",
											"    return tokenData;\r",
											"}\r",
											"\r",
											"const deleteOpenPricing = async () => {\r",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);\r",
											"    \r",
											"}\r",
											"\r",
											"// Calls our requests in order\r",
											"const callRequestsInOrder = async () => {\r",
											"    const interval = setTimeout(() => {}, 4000);\r",
											"\r",
											"    try {\r",
											"\r",
											"        console.log('Creating admin jwt');\r",
											"        await createAdminToken();\r",
											"\r",
											"        console.log('Send Create Publisher Request');        \r",
											"        await createPublisher();\r",
											"\r",
											"        // console.log('Send Create Media Request');\r",
											"        // await createMedia();\r",
											"        \r",
											"        // console.log('Send Create Adspot Request');\r",
											"        // await createAdSpot();\r",
											"        \r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");\r",
											"        await createOpenPricingFirst();\r",
											"\r",
											"        console.log('Send Create Pricing Request First');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");\r",
											"        await createOpenPricingSecond();\r",
											"         \r",
											"        console.log('Send Create Pricing Request Third');\r",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");\r",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");\r",
											"        await createOpenPricingThird();\r",
											"\r",
											"           console.log('Creating cross user');\r",
											"        await createCrossUser();\r",
											"\r",
											"        console.log('Creating cross jwt');\r",
											"        await createCrossToken();\r",
											"\r",
											"        \r",
											"        clearTimeout(interval);\r",
											"\r",
											"    } catch(error) {\r",
											"        console.log('Caught the error: ', error);\r",
											"\r",
											"        //=================================DATA DELETION SECTION==================================\r",
											"        console.log('Send GET Token request for user with Role=5');\r",
											"        await getJwtForUserWithRoleToDelete();\r",
											"        \r",
											"        console.log('Send Delete open pricing First request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Second request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"        console.log('Send Delete open pricing Third request');\r",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);\r",
											"        await deleteOpenPricing();\r",
											"\r",
											"     \r",
											"        \r",
											"        clearTimeout(interval);\r",
											"    }\r",
											"};\r",
											"\r",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.equal(\"bad request\")\r",
											"    });\r",
											"\r",
											" pm.test(\"verify error message is correct\", () =>{\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.equal(\"the CSV file does not have the correct number of columns\")\r",
											"    });\r",
											"\r",
											"const deletelocationOpenPricing = pm.environment.get(\"url\")\r",
											"    .concat(\"/v3/pricing/open/\")\r",
											"\r",
											"const deletelocationMedia = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/media/\")\r",
											"\r",
											"const deletelocationAdSpot = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/adspots/\")\r",
											"\r",
											"const deletelocationPublisher = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/publishers/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing + pm.environment.get(\"import_pricing_id_one\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_two\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_three\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationOpenPricing +  pm.environment.get(\"import_pricing_id_four\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationMedia +  pm.environment.get(\"import_media_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationAdSpot +  pm.environment.get(\"import_adspot_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"const deletelocationUser = pm.environment.get(\"url\")\r",
											"    .concat(\"/v2/accounts/\")\r",
											"\r",
											"pm.sendRequest({\r",
											"  method: 'DELETE',\r",
											"  url: deletelocationUser +  pm.environment.get(\"import_user_id\"),\r",
											"  header: {\r",
											"    \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"})\r",
											"\r",
											"// pm.sendRequest({\r",
											"//   method: 'DELETE',\r",
											"//   url: deletelocationPublisher +  pm.environment.get(\"import_pub_id\"),\r",
											"//   header: {\r",
											"//     \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt_token_for_delete\"),\r",
											"//     'Content-Type': 'application/json'\r",
											"//   },\r",
											"// })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtCross}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3068 incorrect format .csv"
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Upload CSV uprate 1 out of 3 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "1 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV uprate 3 out of 3 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(3);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update int floorPrice  to decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(3);",
											"    });",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(10.1).to.eql(parseFloat(`${pm.environment.get(\"import_pricing_floor_price_one\")}`));",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25.25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(30.3).to.eql(parseFloat(`${pm.environment.get(\"import_pricing_floor_price_three\")}`));",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "int to decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update decimal floorPrice to int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"    });",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect('10.1').to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect('30.3').to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "decimal into int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update dy zero floorPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update dy zero decimal floorPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1)",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero to int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(200)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"    });",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"25\");",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "zero to int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to min decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "to decimal min.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice to max decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(1);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"999999.99\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "to decimal max.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by too large decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"          pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '9999999.99': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by too large decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by too large int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '99999999.00': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by too large int.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative int",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-999999.00': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative integer.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-9999.99': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative decimal.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by negative zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '-0.01': A valid price is between 0.00 and 999,999.99\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by negative zero.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by String value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'Number01': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by string value.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update zero floorPrice by Stringified number value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"0.01\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by stringified numeric value.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice by empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price '': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by emty floor price.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by empty open-pricing-name value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Rule Name '': could not match the open pricing Rule Name to the publisher\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by emty open pricing name.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice by null value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 3, Floor Price 'null': not a valid value\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by null floor price.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice when publisher is disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"Publisher is disabled and must be re-enabled to import pricing rules\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": Boolean(`${pm.environment.get(\"import_pub_isEnabled\")}`)",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Update Publisher object",
											"let updatePublisherObject = {",
											"    get publisherRequest() {",
											"        ",
											"        //Update  Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers/\" + `${pm.environment.get(\"import_pub_id\")}`,",
											"            method: 'PUT',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": false",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const disablePublisher = async () => {",
											"    const request = await reqPromise(updatePublisherObject.publisherRequest);",
											"    ",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');   ",
											"        postman.setEnvironmentVariable(\"import_pub_isEnabled\", true );     ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.11\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"0\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.33\");",
											"        await createOpenPricingThird();",
											"",
											"        console.log('Send Disable Publisher Request');     ",
											"        await disablePublisher();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by disabled publisher.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update floorPrice of disabled open-pricing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Imported\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.imported).to.eql(3);",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"11\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"22\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"33\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3 out of 3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  floorPrice for non existent publisher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(400);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(400)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            ",
											"",
											"                            pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"Publisher must exist to import pricing rules\");",
											"                                    });",
											"",
											"",
											"    ",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by disabled publisher.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id=100500&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "100500"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect floor price header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"    ",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect floorPrice header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect quantity of headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is incorrectly formatted\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect quantity of headers.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV incorrect quantity of columns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file does not have the correct number of columns\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by incorect quantity of colunms.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload empty CSV file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file is empty\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty CSV file.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV file with no data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file contains no data\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by no data.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by non-csv file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(415);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"The uploaded file is not a CSV file\");",
											"                                    });",
											"",
											"",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "non-csv.shell"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV with empty floorPrice header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(400);",
											"    var jsonData = pm.response.json();",
											"",
											"});",
											"",
											"if (isImported = pm.response.to.have.status(400)) {",
											"    var jsonData = pm.response.json();",
											"",
											"    //Get getObject",
											"    let getPricingObject = {",
											"        get getPricingRequest() {",
											"",
											"            //Create get pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    //Get Jwt token of user  with role = 5",
											"    const getJwtToken = {",
											"        url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"        method: 'POST',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"mail\": \"mail74582@test.com\",",
											"                \"password\": \"Password1\"",
											"            })",
											"        }",
											"    };",
											"",
											"",
											"    //Get objectToDelete",
											"    let deletePricingObject = {",
											"        get deletePricingRequest() {",
											"",
											"            //Create delete pricing request",
											"            return {",
											"                url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'content-type': 'application/json',",
											"                    'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"                },",
											"            };",
											"        }",
											"    };",
											"",
											"    console.log('Send Get Pricing First Request');",
											"    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"        var getPricingJsonData = getPricingResponse.json();",
											"        if (err) {",
											"            console.log(err);",
											"            clearTimeout(interval);",
											"        } else {",
											"            postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonData.name);",
											"            postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonData.floorPrice);",
											"",
											"            console.log('Check Updation of first open pricing after import');",
											"            pm.test(\"Check Name of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"            });",
											"",
											"            pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"            });",
											"",
											"            console.log('Send Get Pricing Second Request');",
											"            postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"            pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                var getPricingJsonData = getPricingResponse.json();",
											"                if (err) {",
											"                    console.log(err);",
											"                    clearTimeout(interval);",
											"                } else {",
											"                    postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonData.name);",
											"                    postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                    console.log('Check Updation of Second open pricing after import');",
											"                    pm.test(\"Check Name of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"                    });",
											"",
											"                    pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"                        pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"                    });",
											"",
											"                    console.log('Send Get Pricing Third Request');",
											"                    postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                    pm.sendRequest(getPricingObject.getPricingRequest, function(err, getPricingResponse) {",
											"                        var getPricingJsonData = getPricingResponse.json();",
											"                        if (err) {",
											"                            console.log(err);",
											"                            clearTimeout(interval);",
											"                        } else {",
											"                            postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonData.name);",
											"                            postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonData.floorPrice);",
											"",
											"                            console.log('Check Updation of Third open pricing after import');",
											"                            pm.test(\"Check Name of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"                            });",
											"",
											"                            pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"                                pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"                            });",
											"",
											"                            ",
											"",
											"                            pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"                              ",
											"    ",
											"",
											"                            //=================================DATA DELETION SECTION==================================",
											"                            console.log('Send GET Token request for user with Role=5');",
											"                            pm.sendRequest(getJwtToken, function(err, res) {",
											"                                var tokenData = res.json();",
											"                                if (err) {",
											"                                    console.log(err);",
											"                                } else {",
											"                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                    console.log('Send Delete Pricing First Request');",
											"                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                        if (err) {",
											"                                            console.log(err);",
											"                                            clearTimeout(interval);",
											"                                        } else {",
											"                                            postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                            console.log('Send Delete Pricing Second Request');",
											"                                            postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"                                            pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                if (err) {",
											"                                                    console.log(err);",
											"                                                    clearTimeout(interval);",
											"                                                } else {",
											"                                                    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"                                                    console.log('Send Delete Pricing Third Request');",
											"                                                    postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"                                                    pm.sendRequest(deletePricingObject.deletePricingRequest, function(err, deletePricingResponse) {",
											"                                                        if (err) {",
											"                                                            console.log(err);",
											"                                                            clearTimeout(interval);",
											"                                                        } else {",
											"",
											"                                                        }",
											"                                                    });",
											"                                                }",
											"                                            });",
											"                                        }",
											"                                    });",
											"                                }",
											"                            });",
											"                        }",
											"                    });",
											"                }",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty floor price header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV with empty pricing name header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.error).to.eql(\"the CSV file has incorrect headers\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty pricing name header.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by non-existent pricing among others",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Rule Name 'Import auto four': could not match the open pricing Rule Name to the publisher\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by non-existent among others.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update by duplicated pricing names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"              pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_two\")}`);",
											"        });",
											"",
											"        pm.test(\"verify error message is correct\", () =>{",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson.status).to.equal(\"No records were imported due to errors\")",
											"        });",
											"",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        pm.test(\"Check errror\", () =>{",
											"                                    const responseJson = pm.response.json();",
											"                                    pm.expect(responseJson.errors[0]).to.eql(\"Row 4, Floor Price 'Import auto two': the same Rule Name already exists in row 3\");",
											"                                    });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by duplicated_floorPrice.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload CSV update  by emptty string in CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        pm.test(\"Check Status\", function() {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.status).to.eql(\"No records were imported because there was nothing to update\");",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(\"10.1\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20.2\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"30.3\");",
											"        });",
											"",
											"       ",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10.10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20.20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30.30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by empty String.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "3084",
			"item": [
				{
					"name": "negative",
					"item": [
						{
							"name": "upload 1/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"No records were imported because there was nothing to update\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "1of3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"No records were imported because there was nothing to update\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "2of3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "upload 3/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"No records were imported because there was nothing to update\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3of3.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"No records were imported due to errors\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 400\", function() {",
											"          pm.response.to.have.status(400);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_one\")}`);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "by non-existent among others.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "positive",
					"item": [
						{
							"name": "upload 1/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(parseFloat(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`)).to.eql(123);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"20\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "1of3 - Copy.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(parseFloat(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`)).to.eql(12);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"23\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_floor_price_three\")}`);",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "2of3 - Copy.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "upload 3/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   pm.test(\"check imported number\", function() {",
											"       const json = pm.response.json()",
											"            pm.expect(json.status).to.eql(\"All records with changes were successfully imported\");",
											"        });",
											"",
											"",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      //Create get JWT token of user with role=5 request",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get getObject",
											"let getPricingObject = {",
											"  ",
											"    get getPricingRequest() {",
											"",
											"        //Create get pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"get_import_pricing_id\")}`,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"  ",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const getOpenPricing = async () => {",
											"    const request = await reqPromise(getPricingObject.getPricingRequest);",
											"    const jsonData = await request.json();",
											"",
											"    return jsonData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('RUNNING POSTMAN TESTS');",
											"",
											"        pm.test(\"Status code is 200\", function() {",
											"          pm.response.to.have.status(200);",
											"          var jsonData = pm.response.json();",
											"",
											"        });",
											"",
											"        console.log('Send Get Pricing First Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);      ",
											"        var getPricingJsonDataOne = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_one_after_import\", getPricingJsonDataOne.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_one_after_import\", getPricingJsonDataOne.floorPrice);",
											"",
											"        console.log('Check Updation of first open pricing after import');",
											"        pm.test(\"Check Name of First Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_one_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_one\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of First Pricing after import\", function() {",
											"            pm.expect(parseFloat(`${pm.environment.get(\"import_pricing_floor_price_one_after_import\")}`)).to.eql(101);",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Second Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);  ",
											"        var getPricingJsonDataTwo = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_two_after_import\", getPricingJsonDataTwo.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_two_after_import\", getPricingJsonDataTwo.floorPrice);",
											"",
											"        console.log('Check Updation of Second open pricing after import');",
											"        pm.test(\"Check Name of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_two_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_two\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Second Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_two_after_import\")}`).to.eql(\"120\");",
											"        });",
											"",
											"",
											"",
											"        console.log('Send Get Pricing Third Request');",
											"        postman.setEnvironmentVariable(\"get_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        var getPricingJsonDataThree = await getOpenPricing();",
											"        postman.setEnvironmentVariable(\"import_pricing_name_three_after_import\", getPricingJsonDataThree.name);",
											"        postman.setEnvironmentVariable(\"import_pricing_floor_price_three_after_import\", getPricingJsonDataThree.floorPrice);",
											"",
											"        console.log('Check Updation of Third open pricing after import');",
											"        pm.test(\"Check Name of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_name_three_after_import\")}`).to.eql(`${pm.environment.get(\"import_pricing_name_three\")}`);",
											"        });",
											"",
											"        pm.test(\"Check Floor price of Third Pricing after import\", function() {",
											"            pm.expect(`${pm.environment.get(\"import_pricing_floor_price_three_after_import\")}`).to.eql(\"130\");",
											"        });",
											"",
											"",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Get Publisher object",
											"let publisherObject = {",
											"    get publisherRequest() {",
											"        //Create publisher variables(name,mail,domain,account)",
											"        postman.setEnvironmentVariable('import_pub_name', \"autoPricing\" + Math.floor(Math.random() * (999999)));",
											"        postman.setEnvironmentVariable('import_pub_mail', Math.floor(Math.random() * (999999)) + \"@dot.com\");",
											"        postman.setEnvironmentVariable('import_pub_domain', \"http://\" + Math.floor(Math.random() * (999999)) + \".pricing.com\");",
											"        postman.setEnvironmentVariable('import_pub_sales_account', \"Pricing \" + Math.floor(Math.random() * (999999)));",
											"",
											"        //Create new Publisher",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/publishers\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"mail\": `${pm.environment.get(\"import_pub_mail\")}`,",
											"                    \"currency\": \"EUR\",",
											"                    \"domain\": `${pm.environment.get(\"import_pub_domain\")}`,",
											"                    \"salesAccountName\": `${pm.environment.get(\"import_pub_sales_account\")}`,",
											"                    \"categoryIds\": [",
											"                        10,",
											"                        180",
											"                    ],",
											"                    \"isEnabled\": true",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get media object",
											"let mediaObject = {",
											"    get mediaRequest() {",
											"        //Create New media",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"platform\": \"Android\",",
											"                    \"platformId\": 1,",
											"                    \"categoryIds\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"",
											"                    \"isEnabled\": true,",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Media\",",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"url\": \"http://local.host\"",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get Adspot Object",
											"let adSpotObject = {",
											"    get adspotRequest() {",
											"        //Create New adspot",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v2/media/\" +",
											"                `${pm.environment.get(\"import_media_id\")}` + \"/adspots\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": `${Math.floor(Math.random()*(999999))}` + \"auto Adspot\",",
											"                    \"mediaId\": parseInt(`${pm.environment.get(\"import_media_id\")}`),",
											"                    \"categoryIds\": [1, 10, 2, 50, 392],",
											"                    \"publisherId\": parseInt(`${pm.environment.get(\"import_pub_id\")}`),",
											"                    \"publisherName\": `${pm.environment.get(\"import_pub_name\")}`,",
											"                    \"floorPrice\": 10,",
											"                    \"floorPriceAutomated\": false,",
											"                    \"testMode\": false,",
											"                    \"enabled\": true,",
											"                    \"customSizing\": true,",
											"                    \"coppa\": true,",
											"                    \"sizeIds\": [",
											"                        10",
											"                    ],",
											"                    \"positionId\": 1,",
											"                    \"banner\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11,",
											"                        \"sizeIds\": [",
											"                            3",
											"                        ]",
											"                    },",
											"                    \"native\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 11.11",
											"                    },",
											"                    \"video\": {",
											"                        \"enabled\": true,",
											"                        \"floorPrice\": 111.111,",
											"                        \"playbackMethodIds\": [",
											"                            1,",
											"                            2",
											"                        ],",
											"                        \"sizeIds\": [",
											"                            4",
											"                        ],",
											"                        \"minDuration\": 12,",
											"                        \"maxDuration\": 22",
											"                    }",
											"                })",
											"            }",
											"        };",
											"    }",
											"};",
											"",
											"//Get prcing object",
											"let openPricingObject = {",
											"    get openPricingRequest() {",
											"",
											"        //Create new pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open\",",
											"            method: 'POST',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt\")}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"active\": true,",
											"                    \"notes\": \"test notes\",",
											"                    \"name\": postman.getEnvironmentVariable('import_pricing_name'),",
											"                    \"floorPrice\": parseFloat(`${pm.environment.get(\"import_pricing_floor_price\")}`),",
											"                    \"publisherId\":",
											"",
											"                        parseInt(`${pm.environment.get(\"import_pub_id\")}`)",
											"",
											"                        ,",
											"                    \"rule\": {",
											"                        // \"adspot\": {",
											"                        //     \"includedAdspots\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_adspot_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"excludedAdspots\": null",
											"                        // },",
											"                        \"adFormat\": {",
											"                            \"adFormats\": [",
											"                                2",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"adSize\": {",
											"                            \"adSizes\": [",
											"                                10",
											"                            ],",
											"                            \"exclude\": null",
											"                        },",
											"                        // \"media\": {",
											"                        //     \"media\": [",
											"",
											"                        //         parseInt(`${pm.environment.get(\"import_media_id\")}`)",
											"",
											"                        //     ],",
											"                        //     \"exclude\": null",
											"                        // },",
											"                        \"deviceType\": {",
											"                            \"deviceTypes\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"geo\": {",
											"                            \"geos\": [",
											"                                221",
											"",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"deviceOS\": {",
											"                            \"deviceOSs\": [",
											"                                4",
											"                            ],",
											"                            \"exclude\": false",
											"                        },",
											"                        \"dsp\": {",
											"                            \"dsps\": [3],",
											"                            \"exclude\": false",
											"                        }",
											"                    }",
											"                })",
											"            }",
											"        };",
											"",
											"    }",
											"};",
											"",
											"//Get Jwt token of user  with role = 5",
											"let getJwtTokenObject = {",
											"",
											"    get getJwtTokenRequest() {",
											"",
											"      return{",
											"",
											"    url: `${pm.environment.get(\"url\")}` + \"/v2/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"mail\": \"mail74582@test.com\",",
											"            \"password\": \"Password1\"",
											"        })",
											"    }",
											"  };",
											"}",
											"};",
											"",
											"//Get objectToDelete",
											"let deletePricingObject = {",
											"    get deletePricingRequest() {",
											"",
											"        //Create delete pricing request",
											"        return {",
											"            url: `${pm.environment.get(\"url\")}` + \"/v3/pricing/open/\" + `${pm.environment.get(\"delete_import_pricing_id\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization': \"Bearer \" + `${pm.environment.get(\"jwt_token_for_delete\")}`",
											"            },",
											"        };",
											"    }",
											"};",
											"",
											"// Turns pm.sendRequest into a promise",
											"const reqPromise = (urlPath) => {",
											"",
											"    return new Promise ((resolve, reject) => {",
											"        pm.sendRequest(urlPath, function (err, response) {",
											"            if (err) reject(err);",
											"            resolve(response);",
											"        });",
											"    });",
											"}",
											"",
											"const createPublisher = async () => {",
											"    const request = await reqPromise(publisherObject.publisherRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pub_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"",
											"const createMedia = async () => {",
											"    const request = await reqPromise(mediaObject.mediaRequest);",
											"    const mediaJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_media_id\", mediaJsonData.id);",
											"    ",
											"    return mediaJsonData;",
											"}",
											"",
											"const createAdSpot = async () => {",
											"    const request = await reqPromise(adSpotObject.adspotRequest);",
											"    const jsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_adspot_id\", jsonData.id);",
											"",
											"    return jsonData;",
											"}",
											"",
											"const createOpenPricingFirst = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_one\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_one\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_one\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingSecond = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_two\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_two\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_two\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const createOpenPricingThird = async () => {  ",
											"    const request = await reqPromise(openPricingObject.openPricingRequest);",
											"    const pricingJsonData = await request.json();",
											"    postman.setEnvironmentVariable(\"import_pricing_id_three\", pricingJsonData.id);",
											"    postman.setEnvironmentVariable(\"import_pricing_name_three\", pricingJsonData.name);",
											"    postman.setEnvironmentVariable(\"import_pricing_floor_price_three\", pricingJsonData.floorPrice);",
											"    ",
											"    return pricingJsonData;   ",
											"}",
											"",
											"const getJwtForUserWithRoleToDelete = async () => {",
											"    const request = await reqPromise(getJwtTokenObject.getJwtTokenRequest);",
											"    const tokenData = await request.json();",
											"    postman.setEnvironmentVariable(\"jwt_token_for_delete\", tokenData.token);",
											"",
											"    return tokenData;",
											"}",
											"",
											"const deleteOpenPricing = async () => {",
											"    const request = await reqPromise(deletePricingObject.deletePricingRequest);",
											"    ",
											"}",
											"",
											"// Calls our requests in order",
											"const callRequestsInOrder = async () => {",
											"    const interval = setTimeout(() => {}, 4000);",
											"",
											"    try {",
											"",
											"        console.log('Send Create Publisher Request');        ",
											"        await createPublisher();",
											"",
											"        // console.log('Send Create Media Request');",
											"        // await createMedia();",
											"        ",
											"        // console.log('Send Create Adspot Request');",
											"        // await createAdSpot();",
											"        ",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto one\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"10\");",
											"        await createOpenPricingFirst();",
											"",
											"        console.log('Send Create Pricing Request First');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto two\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"20\");",
											"        await createOpenPricingSecond();",
											"         ",
											"        console.log('Send Create Pricing Request Third');",
											"        postman.setEnvironmentVariable('import_pricing_name', \"Import auto three\");",
											"        postman.setEnvironmentVariable('import_pricing_floor_price', \"30\");",
											"        await createOpenPricingThird();",
											"        ",
											"        clearTimeout(interval);",
											"",
											"    } catch(error) {",
											"        console.log('Caught the error: ', error);",
											"",
											"        //=================================DATA DELETION SECTION==================================",
											"        console.log('Send GET Token request for user with Role=5');",
											"        await getJwtForUserWithRoleToDelete();",
											"        ",
											"        console.log('Send Delete open pricing First request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_one\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Second request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_two\")}`);",
											"        await deleteOpenPricing();",
											"",
											"        console.log('Send Delete open pricing Third request');",
											"        postman.setEnvironmentVariable(\"delete_import_pricing_id\", `${pm.environment.get(\"import_pricing_id_three\")}`);",
											"        await deleteOpenPricing();",
											"        ",
											"        clearTimeout(interval);",
											"    }",
											"};",
											"",
											"callRequestsInOrder();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "File input",
											"type": "file",
											"src": "3of3 - Copy.csv"
										},
										{
											"key": "type",
											"value": "text/csv",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/v3/pricing/open/import?publisher_id={{import_pub_id}}&mode=price",
									"host": [
										"{{url}}"
									],
									"path": [
										"v3",
										"pricing",
										"open",
										"import"
									],
									"query": [
										{
											"key": "publisher_id",
											"value": "{{import_pub_id}}"
										},
										{
											"key": "mode",
											"value": "price"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"password = postman.getEnvironmentVariable(\"newpassword\") + \"0\";",
							"postman.setEnvironmentVariable(\"newpassword\", password);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"{{newpassword}}\",\n  \"newPassword\": \"{{newpassword}}0\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v2/me/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"me",
						"password"
					]
				}
			},
			"response": []
		}
	]
}